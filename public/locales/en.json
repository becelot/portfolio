{
  "experience": {
    "data": {
      "job": "My contributions:<br/>  <ul> \t<li><div>Optimization of already implemented data mining algorithms</div></li> \t<li><div>Research and implementation of additional feature extraction algorithms</div></li> \t<li><div>Compare and evaluate the different approaches to the applicability of common comparison metrics</div></li> </ul>",
      "short_description": "Feature extraction from the ImageNet database",
      "time": "September 2014 - March 2015 | Aachen",
      "title": "Research Assistant"
    },
    "db": {
      "header": "RWTH Aachen Universtiy",
      "job": "Contact for questions from students about the database-course. Additionally, I corrected the weekly exercise handed in by students.",
      "time": "April 2014 - September 2014 | Aachen",
      "title": "Tutor for Databases course at RWTH Aachen"
    },
    "eod": {
      "header": "Cooperation",
      "job": "A cooperation between RWTH Aachen University and E.ON. I supported the project throughout the entire lifecycle, from the initial design to the final deployment. My contributions include:<br/> <ul> \t<li><div>Developed Android Application used by E.ON end-users (Java)</div></li> \t<li><div>Optimized and designed backend algorithms and data structures (Python)</div></li>  \t<li><div>Implemented a web-based User-Interface for data visualization and process monitoring (Angular, TypeScript)</div></li>  \t<li><div>Integrationstests, including a simulator (Java) and a WYSIWYG data generator (C#/WPF)</div></li>  \t<li><div>Definition of a DSL that allows to describe the behavior of the Android application and the simulated devices (MPS)</div></li> </ul>",
      "short_description": "Design and implementation of an energy outage detection system",
      "time": "April 2017 - May 2019 | Aachen",
      "title": "Research Assistant"
    },
    "header": "Experience"
  },
  "header": {
    "about-me": "About me",
    "home": "Home",
    "projects": "Projects",
    "skills": "Skills"
  },
  "projects": {
    "about": "Depending on the projects requirements, I use the appropriate toolset for the given problem. I like to write front and backends, but am also proficient in writing Android/iOS and .NET applications.",
    "dht": {
      "name": "Deck History Tracker",
      "problem": "Problem",
      "problem_description": "Hearthstone is a card game designed by <a href=\"https://www.blizzard.com/\" target=\"_blank\">Blizzard Entertainment</a>. It is not only a popular game, but often streamed and watched on <a href=\"https://twitch.tv\" target=\"_blank\">Twitch.tv</a>. Viewers are often requesting the decklists that a streamer recently played on stream. Most often, they are only able to provide the currently played decklist.",
      "project": "Project",
      "short_description": "<a href=\"https://twitch.tv\" target=\"_blank\">Twitch.tv</a> extension that shows the decks that a streamer recently played.",
      "solution": "Solution",
      "solution-0": "No extra effort for streamer. Extracts and saves played decks automatically.",
      "solution-1": "No extra effort for users. Integrates seamlessly into the <a href=\"https://twitch.tv\" target=\"_blank\">twitch.tv</a> experience.",
      "solution-2": "Manages and visualizes deck history. Revert deck to a previous version!",
      "solution-3": "Authorization and session management using JWT",
      "solution-4": "Authenticate account with <a href=\"https://twitch.tv\" target=\"_blank\">Twitch.tv-Login</a>",
      "solution_description": "This extension tracks recently played decks and visualizes them in an overlay installed into the streamers stream. Users can browse recent decklists and import them into their game, without leaving the stream. They can also see, how the deck evolved over time, and what choices a streamer made. Key features are:"
    },
    "dslviz": {
      "live_nda": "Live preview is currently under NDA. Available: December 2019",
      "name": "DSLViz",
      "problem": "Problem",
      "problem_description": "Domain-specific languages (DSL) are programming languages built for a specific domain. They reduce the vocabulary of general-purpose languages and thus their accessibility for end-users, i.e. users without experience in programming and computer science. However, they DSLs suffer from two problems. They don't use the visual capabilities of humans and still have to be tought to the user in the first place.",
      "project": "Project",
      "short_description": "A web framework based on Angular to visualize domain-specific languages.",
      "solution": "Solution",
      "solution-0": "Framework build on top of Angular",
      "solution-1": "Targeted towards developers of DSLs",
      "solution-2": "Specify interaction possibilities with AST nodes",
      "solution-3": "No user-installation needed. Just run it in the browser!",
      "solution-4": "Plugin-System: Extend the expressiveness of the framework",
      "solution_description": "DSLViz is a framework that enables developers to implement the well-known AST datastructure used in DSL development, but represented in the form of visual web component. Simultaneously, it allows to specify, how users can interact with AST nodes. This information is aggregated by the framework, allowing end-users to create models for the DSL visually, rather than relying on the user to learn the abstract syntax of the programming language. Key features are:",
      "source_nda": "Source Code is currently under NDA. Available: December 2019"
    },
    "live_nda": "Live preview is currently under NDA.",
    "mensa": {
      "live_nda": "Android application, no web-preview available",
      "name": "MensaApp",
      "project": "Project",
      "short_description": "Android application that downloads and visualizes current and future meals in university canteens. A backend downloads the week's new menus from the university server, parses the downloaded website using RegEx, and saves the results. The Android application can connect to the backend in order to download the dishes. The backend acts as a proxy server that minimizes expensive requests. In particular, new canteens and universities can be implemented in the backend without having to recompile the Android application<br /><br />The android application is also able to display the dishes without connecting to the developed backend, but by parsing the HTML response of the university server itself. A shared module implements the extraction of dishes once, which is then shared between the Android application and the backend server.<br/><br/>The backend is currently hosted on <a href=\"https://heroku.com\" target=\"_blank\">Heroku</a>, a cloud application platform."
    },
    "more": "More projects available on by GitHub",
    "read_more": "Read more",
    "source_nda": "Source Code is currently under NDA.",
    "unnamed": {
      "name": "<English Name>",
      "short_description": "English short description"
    },
    "vt": {
      "live_nda": "Windows application, no web-preview available",
      "name": "VocTrainer",
      "project": "Project",
      "short_description": "Application that enables the user to add vocabulary by lesson and category. Randomly generates questionnaires by lesson, category, customizable filters, or from all added words.<br/><br/>A Windows application based on C#/WPF + MahApps I developed for my japanese courses I took in university. Most of the already available tools were missing key features, such as customizable questionnaires."
    }
  },
  "skills": {
    "header": "Skills"
  }
}