{
  "header": {
    "about-me": "About me",
    "home": "Home",
    "projects": "Projects",
    "skills": "Skills"
  },
  "projects": {
    "about": "Depending on the projects requirements, I use the appropriate toolset for the given problem. I like to write front and backends, but am also proficient in writing Android/iOS and .NET applications.",
    "dht": {
      "name": "Deck History Tracker",
      "problem": "Problem",
      "problem_description": "Hearthstone is a card game designed by <a href=\"https://www.blizzard.com/\" target=\"_blank\">Blizzard Entertainment</a>. It is not only a popular game, but often streamed and watched on <a href=\"https://twitch.tv\" target=\"_blank\">Twitch.tv</a>. Viewers are often requesting the decklists that a streamer recently played on stream. Most often, they are only able to provide the currently played decklist.",
      "project": "Project",
      "short_description": "<a href=\"https://twitch.tv\" target=\"_blank\">Twitch.tv</a> extension that shows the decks that a streamer recently played.",
      "solution": "Solution",
      "solution-0": "No extra effort for streamer. Extracts and saves played decks automatically.",
      "solution-1": "No extra effort for users. Integrates seamlessly into the <a href=\"https://twitch.tv\" target=\"_blank\">twitch.tv</a> experience.",
      "solution-2": "Manages and visualizes deck history. Revert deck to a previous version!",
      "solution-3": "Authorization and session management using JWT",
      "solution-4": "Authenticate account with <a href=\"https://twitch.tv\" target=\"_blank\">Twitch.tv-Login</a>",
      "solution_description": "This extension tracks recently played decks and visualizes them in an overlay installed into the streamers stream. Users can browse recent decklists and import them into their game, without leaving the stream. They can also see, how the deck evolved over time, and what choices a streamer made. Key features are:"
    },
    "dslviz": {
      "name": "DSLViz",
      "problem": "Problem",
      "problem_description": "Domain-specific languages (DSL) are programming languages built for a specific domain. They reduce the vocabulary of general-purpose languages and thus their accessibility for end-users, i.e. users without experience in programming and computer science. However, they DSLs suffer from two problems. They don't use the visual capabilities of humans and still have to be tought to the user in the first place.",
      "project": "Project",
      "short_description": "A web framework based on Angular to visualize domain-specific languages.",
      "solution": "Solution",
      "solution-0": "Framework build on top of Angular",
      "solution-1": "Targeted towards developers of DSLs",
      "solution-2": "Specify interaction possibilities with AST nodes",
      "solution-3": "No user-installation needed. Just run it in the browser!",
      "solution-4": "Plugin-System: Extend the expressiveness of the framework",
      "solution_description": "DSLViz is a framework that enables developers to implement the well-known AST datastructure used in DSL development, but represented in the form of visual web component. Simultaneously, it allows to specify, how users can interact with AST nodes. This information is aggregated by the framework, allowing end-users to create models for the DSL visually, rather than relying on the user to learn the abstract syntax of the programming language. Key features are:"
    },
    "live_nda": "Live preview is currently under NDA.",
    "mensa": {
      "name": "MensaApp",
      "project": "Project",
      "short_description": "An Android application that downloads and visualizes current and future meals in university canteens. Meals are retrieved from a custom backend."
    },
    "read_more": "Read more",
    "source_nda": "Source Code is currently under NDA.",
    "unnamed": {
      "name": "<English Name>",
      "short_description": "English short description"
    },
    "vt": {
      "name": "VocTrainer",
      "short_description": "Application that enables the user to add vocabulary by lesson and category. Randomly generates questionnaires by lesson, category or from all added words."
    }
  }
}